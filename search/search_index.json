{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the DBRetina documentation","text":""},{"location":"#dbretina-introduction","title":"DBRetina introduction","text":"<p>DBRetina is a powerful tool designed to calculate pairwise distances between numerous entities, such as diseases or molecular experiments, based on their shared features, such as genes. DBRetina provides valuable insights for researchers and professionals in various fields by identifying similarities between entries in a given database.</p> <p>For instance, in the context of a disease database, each disease is associated with a set of risk genes. DBRetina calculates the pairwise distance between all diseases in the database by analyzing the number of shared genes between each pair of diseases. This information can be used to identify closely related diseases or uncover underlying patterns in the data.</p> <p>DBRetina streamlines the analysis of complex relationships within databases by leveraging advanced indexing and querying techniques. Its versatile and efficient design allows users to work with various data types and structures, making it a valuable tool for understanding and interpreting complex biological and molecular associations.</p>"},{"location":"#dbretinas-commands-chaining","title":"DBRetina's commands chaining","text":"<p>The commands can be chained together as follows:</p> <ol> <li> <p>Index \u2192 Pairwise: The output from the Index command can be used as input for the Pairwise command.</p> </li> <li> <p>Pairwise \u2192 Filter, Cluster, Export: The output from the Pairwise command can be used as input for the Filter, Cluster, or Export commands.</p> </li> <li> <p>Filter \u2192 Cluster, Export: The output from the Filter command can be used as input for the Cluster or Export commands.</p> </li> <li> <p>Cluster \u2192 Filter: The output from the Cluster command can be used as input for the Filter command.</p> </li> </ol> <p>This chaining allows for a seamless flow of data from one stage of processing to another, improving efficiency and ease of use.</p> <p>Please note that the arrow (--&gt;) denotes the direction of data flow from the output of one command to the input of the next.</p>"},{"location":"DisGeNET_similarity_network-complete/","title":"USECASE: Building a disease-disease similairty netwrok","text":"<ul> <li>DBRetina is an efficent tool for  building a similarity network for a set of items by pairwaise calcuation of their shared features using a linear-time algorithm.</li> <li>DisGeNET has one of the largest collections of genes associated to human diseases.</li> <li>In this tutorial, we will use DBRetina to build a disease-disease similairty netwrok based on the shared number of genes asscoiated with them in the DisGeNET database</li> </ul> In\u00a0[1]: Copied! <pre>%%bash\n## Download the most recent version of disease gene associations from DisGeNET\nif [ ! -f all_gene_disease_associations.tsv ];then\n  wget --quiet http://www.disgenet.org/static/disgenet_ap1/files/downloads/all_gene_disease_associations.tsv.gz\n  gunzip all_gene_disease_associations.tsv.gz\nelse echo \"all_gene_disease_associations.tsv file exists in the disgenet DB\";fi\n</pre> %%bash ## Download the most recent version of disease gene associations from DisGeNET if [ ! -f all_gene_disease_associations.tsv ];then   wget --quiet http://www.disgenet.org/static/disgenet_ap1/files/downloads/all_gene_disease_associations.tsv.gz   gunzip all_gene_disease_associations.tsv.gz else echo \"all_gene_disease_associations.tsv file exists in the disgenet DB\";fi In\u00a0[2]: Copied! <pre>%%bash\nhead -n3 all_gene_disease_associations.tsv | tr '\\t' ',' | sed 's/ //g'\n## Here are some quaility matrices\n# Score: estimate for the curation and size of evidence \n# DSI (Disease Specificity Index): Some genes are associated wiht multiple diseases (e.g. TNF) while others are more specific\n# DPI (Disease Pleiotropy Index): similar but consider the disease similarity based on MeSH classes\n</pre> %%bash head -n3 all_gene_disease_associations.tsv | tr '\\t' ',' | sed 's/ //g' ## Here are some quaility matrices # Score: estimate for the curation and size of evidence  # DSI (Disease Specificity Index): Some genes are associated wiht multiple diseases (e.g. TNF) while others are more specific # DPI (Disease Pleiotropy Index): similar but consider the disease similarity based on MeSH classes <pre>geneId,geneSymbol,DSI,DPI,diseaseId,diseaseName,diseaseType,diseaseClass,diseaseSemanticType,score,EI,YearInitial,YearFinal,NofPmids,NofSnps,source\n1,A1BG,0.7,0.538,C0001418,Adenocarcinoma,group,C04,NeoplasticProcess,0.01,1,2008,2008,1,0,LHGDN\n1,A1BG,0.7,0.538,C0002736,AmyotrophicLateralSclerosis,disease,C18;C10,DiseaseorSyndrome,0.01,1,2008,2008,1,0,BEFREE\n</pre> In\u00a0[4]: Copied! <pre>%%bash\n## transform the data table into the DBRetina format\n## DBRetina expects 2 files. Both are tab-separated files with two columns. Files must have header lines\n## 1) Associations file: The 1st column for \"items\" and the 2nd for their asscoiated \"features\".\n## 2) Super-association file: The 1st column for \"items\" and the 2nd for their \"aliases\". You can use this column to update the item name or if you want to pool multiple items together as one super item otherwise the 2nd column should be a copy of the 1st column\n## In addition, we will filter the input list to keep trusted disease-gene associations only (DisGeNET score &gt; 0.3)\ncat all_gene_disease_associations.tsv | sed -e 's/^[ \\t]*//' | awk 'BEGIN{FS=OFS=\"\\t\";}{if($10&gt;0.3)print $6,$2}' &gt; disgenet.asc\ntail -n+2 disgenet.asc | awk 'BEGIN{FS=OFS=\"\\t\";}{print $1,$1}' | sort | uniq &gt; disgenet.names\n</pre> %%bash ## transform the data table into the DBRetina format ## DBRetina expects 2 files. Both are tab-separated files with two columns. Files must have header lines ## 1) Associations file: The 1st column for \"items\" and the 2nd for their asscoiated \"features\". ## 2) Super-association file: The 1st column for \"items\" and the 2nd for their \"aliases\". You can use this column to update the item name or if you want to pool multiple items together as one super item otherwise the 2nd column should be a copy of the 1st column ## In addition, we will filter the input list to keep trusted disease-gene associations only (DisGeNET score &gt; 0.3) cat all_gene_disease_associations.tsv | sed -e 's/^[ \\t]*//' | awk 'BEGIN{FS=OFS=\"\\t\";}{if($10&gt;0.3)print $6,$2}' &gt; disgenet.asc tail -n+2 disgenet.asc | awk 'BEGIN{FS=OFS=\"\\t\";}{print $1,$1}' | sort | uniq &gt; disgenet.names In\u00a0[5]: Copied! <pre>%%bash\n## Let us explore the format of the prepared filed\necho \"DisGeNET input file\"\nwc -l all_gene_disease_associations.tsv\necho \"===================\"\n\necho \"Associations file\"\nwc -l disgenet.asc\necho \"-------------------\"\nhead -n3 disgenet.asc\necho \"===================\"\n\necho \"Super-associations file\"\nwc -l disgenet.names\necho \"-------------------\"\nhead -n3 disgenet.names\n</pre> %%bash ## Let us explore the format of the prepared filed echo \"DisGeNET input file\" wc -l all_gene_disease_associations.tsv echo \"===================\"  echo \"Associations file\" wc -l disgenet.asc echo \"-------------------\" head -n3 disgenet.asc echo \"===================\"  echo \"Super-associations file\" wc -l disgenet.names echo \"-------------------\" head -n3 disgenet.names <pre>DisGeNET input file\n1134943 all_gene_disease_associations.tsv\n===================\nAssociations file\n33012 disgenet.asc\n-------------------\ndiseaseName\tgeneSymbol\nAlzheimer's Disease\tA2M\nMalignant tumor of colon\tA2M\n===================\nSuper-associations file\n8155 disgenet.names\n-------------------\n11-Beta-hydroxylase deficiency\t11-Beta-hydroxylase deficiency\n12q14 microdeletion syndrome\t12q14 microdeletion syndrome\n17,20-Lyase Deficiency, Isolated\t17,20-Lyase Deficiency, Isolated\n</pre> In\u00a0[\u00a0]: Copied! <pre>%%bash\n## Now we can run DBRetina\nDBRetina index --asc disgenet.asc --names disgenet.names --output disgenetDBR\nDBRetina pairwise --index-prefix disgenetDBR\n\n# The output of DBRetina pairwise includes:\n# 1) A table of pairwise combinations \"${kPro_index}_DBRetina_pairwise.tsv\". The table show different distance measures\n# 2) A JSON stat file and histograms to allow exploring the distributions of these distance measures\n</pre> %%bash ## Now we can run DBRetina DBRetina index --asc disgenet.asc --names disgenet.names --output disgenetDBR DBRetina pairwise --index-prefix disgenetDBR  # The output of DBRetina pairwise includes: # 1) A table of pairwise combinations \"${kPro_index}_DBRetina_pairwise.tsv\". The table show different distance measures # 2) A JSON stat file and histograms to allow exploring the distributions of these distance measures  In\u00a0[7]: Copied! <pre>%%bash\n# Have a look on the output pairwise file\nhead disgenetDBR_DBRetina_pairwise.tsv\n</pre> %%bash # Have a look on the output pairwise file head disgenetDBR_DBRetina_pairwise.tsv <pre>#nodes:8155\n#command: DBRetina index --asc /home/jovyan/disgenet.asc --names /home/jovyan/disgenet.names --output disgenetDBR\n#command: DBRetina pairwise --index-prefix disgenetDBR\ngroup_1_ID\tgroup_2_ID\tgroup_1_name\tgroup_2_name\tshared_features\tmin_containment\tavg_containment\tmax_containment\tochiai\tjaccard\n3569\t3672\tmajor depressive disorder\ttoxic shock syndrome\t1\t0.4\t25.2\t50.0\t4.6\t0.4\n4366\t5100\tbipolar disorder\themophilia a\t1\t0.2\t25.1\t50.0\t3.5\t0.2\n2861\t4500\tneuroblastoma\tgiant cell glioblastoma\t1\t2.3\t8.3\t14.3\t5.7\t2.0\n2856\t4816\tadult type dermatomyositis\tdermatomyositis, childhood type\t3\t50.0\t75.0\t100.0\t70.7\t50.0\n696\t6570\tdiabetes mellitus, insulin-dependent\thyperglycemia\t4\t9.8\t13.6\t17.4\t13.0\t6.7\n4571\t7616\tmalignant tumor of colon\thepatoblastoma\t5\t4.4\t33.5\t62.5\t16.6\t4.3\n</pre> In\u00a0[8]: Copied! <pre>%%bash\n# How many pairwise combinations did we do?\necho \"The number of pairwise combinations =\" $(wc -l disgenetDBR_DBRetina_pairwise.tsv | cut -d\" \" -f1)\n</pre> %%bash # How many pairwise combinations did we do? echo \"The number of pairwise combinations =\" $(wc -l disgenetDBR_DBRetina_pairwise.tsv | cut -d\" \" -f1) <pre>The number of pairwise combinations = 165827\n</pre> In\u00a0[9]: Copied! <pre># Now, let us have a look on the distance metrics histogram\nfrom IPython.display import Image\ndisplay(Image(filename='disgenetDBR_DBRetina_distance_metrics_plot_linear.png'))\n</pre> # Now, let us have a look on the distance metrics histogram from IPython.display import Image display(Image(filename='disgenetDBR_DBRetina_distance_metrics_plot_linear.png')) In\u00a0[10]: Copied! <pre>%%bash\nDBRetina cluster --pairwise disgenetDBR_DBRetina_pairwise.tsv --dist-type min_cont --cutoff 50 -o min_cont_50\n\n## DBRetina cluster uses graph partitioning approach to recognize weakly connected componenets using one of the measure distance metrics\n## To increase the partitioning of the graph, adding a cutoff will filter the low pairwise similarities on the fly and thus increase the number of clusters. \n## Clustering produces a cluster file as well as a histogram and a bubble plot for the cluster sizes.\n</pre> %%bash DBRetina cluster --pairwise disgenetDBR_DBRetina_pairwise.tsv --dist-type min_cont --cutoff 50 -o min_cont_50  ## DBRetina cluster uses graph partitioning approach to recognize weakly connected componenets using one of the measure distance metrics ## To increase the partitioning of the graph, adding a cutoff will filter the low pairwise similarities on the fly and thus increase the number of clusters.  ## Clustering produces a cluster file as well as a histogram and a bubble plot for the cluster sizes. <pre>[INFO] Loading TSV pairwise file\n[INFO] Building the main graph...\n</pre> <pre>[i] constructing graph\n</pre> <pre>[INFO] Clustering...\n[INFO] writing min_cont_50_clusters.tsv\n[INFO] plotting cluster sizes histogram and bubble plot\n[INFO] Total number of clustered supergroups: 5132\n[INFO] number of clusters: 1216\n</pre> In\u00a0[11]: Copied! <pre>%%bash\n# Let us have a look on the cluster file\nhead min_cont_50_clusters.tsv\n</pre> %%bash # Let us have a look on the cluster file head min_cont_50_clusters.tsv <pre>#nodes:8155\n#command: DBRetina index --asc /home/jovyan/disgenet.asc --names /home/jovyan/disgenet.names --output disgenetDBR\n#command: DBRetina pairwise --index-prefix disgenetDBR\n#command: DBRetina cluster --pairwise /home/jovyan/disgenetDBR_DBRetina_pairwise.tsv --dist-type min_cont --cutoff 50 -o /home/jovyan/min_cont_50\ncluster_id\tcluster_size\tcluster_members\n1\t5\tnephropathic cystinosis|cystinosis, benign, nonnephropathic|cystinosis, atypical nephropathic (disorder)|cystinosis|juvenile nephropathic cystinosis (disorder)\n2\t310\tenchondroma|malignant neoplasm of adrenal cortex|glioma susceptibility 2|salivary gland neoplasms|adenocarcinoma of colon|balkan nephropathy|endometrial stromal sarcoma, high grade|genitourinary cancer|squamous cell carcinoma of mouth|carcinoma, cribriform|erdheim-chester disease|craniofacial dysostosis|carcinoma, granular cell|anaplastic oligodendroglioma|robinow sorauf syndrome|diffuse astrocytoma|ameloblastoma|adrenocortical carcinoma, hereditary|desmoid disease, hereditary|bile duct carcinoma|intestinal cancer|kallmann syndrome 1|small cell carcinoma of ovary|melanoma, cutaneous malignant, susceptibility to, 3|secretory meningioma|polyposis, adenomatous intestinal|single seizure|polydactyly, postaxial, type a1|melanoma, cutaneous malignant, susceptibility to, 5|streptozotocin diabetes|hepatoma, morris|photosensitive trichothiodystrophy|cardiofaciocutaneous syndrome 2|cancer of urinary tract|leopard syndrome 3|peripheral nerve sheath neoplasm|craniosynostosis 4|basal cell carcinoma, susceptibility to, 7|vacterl association|craniodiaphyseal dysplasia, autosomal dominant (disorder)|neuroma, acoustic, bilateral|osteoporosis with pseudoglioma|cardiofaciocutaneous syndrome 3|aortic diseases|congenital absence of tibia|ras-associated autoimmune leukoproliferative disorder|myasthenic syndrome, congenital, 17|gemistocytic astrocytoma|cancer of nasopharynx|rheumatoid arthritis, systemic juvenile|mental deficiency|adenoma, microcystic|craniofacial dysostosis type 1|vater association|syndactyly, type 2|glioma susceptibility 1|cervix carcinoma|mental retardation, autosomal dominant 15|myocardial failure|metaphyseal enchondromatosis with d-2-hydroxyglutaric aciduria|acrodysostosis 2 with or without hormone resistance|primary pigmented nodular adrenocortical disease|neurofibromatosis, familial spinal|vulvar lichen sclerosus|myxoma|carney complex, type 1|sarcoma, spindle cell|adult hepatocellular carcinoma|postaxial polydactyly, type b|sphenoid wing meningioma|keutel syndrome|fibromatosis, abdominal|meningioma, familial, susceptibility to|hematochezia|neurocutaneous melanosis|head and neck carcinoma|pten hamartoma tumor syndrome|acrodysostosis|syndactyly, type v|cowden syndrome 6|anaplastic oligoastrocytoma|adrenal gland neoplasms|childhood hepatocellular carcinoma|aseptic meningitis|trigonocephaly|carcinomatosis of peritoneal cavity|scaphocephaly and axenfeld-rieger anomaly|hepatoma, novikoff|macrocephaly with multiple epiphyseal dysplasia and distinctive facies|advanced bone age|rhabdoid tumor predisposition syndrome|sclerosteosis 1|plagiocephaly|winter shortland temple syndrome|childhood oligodendroglioma|macrocephaly/autism syndrome|adenocarcinoma, oxyphilic|chondroma|rhabdoid tumor predisposition syndrome 2|histiocytosis, langerhans-cell|neurofibromatosis 2|synovitis, acne, pustulosis, hyperostosis, and osteitis syndrome|saethre-chotzen syndrome|fibrillary astrocytoma|pigmented nodular adrenocortical disease, primary, 2|nevus sebaceous|organoid nevus phakomatosis|gallbladder neoplasm|brachydactyly, type e1|lacrimoauriculodentodigital syndrome|squamous cell carcinoma of tongue|malignant lymphoma - lymphocytic, intermediate differentiation|acoustic neuroma|cardiotoxicity|li-fraumeni syndrome|thymic carcinoma|liposarcoma, pleomorphic|bowen's disease|endometrial hyperplasia|bannayan-riley-ruvalcaba syndrome|adult oligodendroglioma|hydrolethalus syndrome|syringocystadenoma papilliferum|van buchem disease type 2|follicular thyroid carcinoma|central nervous system neoplasms|angioma|polydactyly, postaxial|lhermitte-duclos disease|cutis gyrata syndrome of beare and stevenson|erythrocytosis, familial, 2|cerebrooculofacioskeletal syndrome 2|lipomatosis|melanoma-pancreatic cancer syndrome|acrocephaly|skin abnormalities|adenoma, basal cell|colorectal cancer, hereditary nonpolyposis, type 4|malignant neoplasm of gastrointestinal tract|neurofibromatoses|adult malignant peripheral nerve sheath tumor|pfeiffer syndrome|neoplastic cell transformation|polycystic liver disease 4 with or without kidney cysts|craniosynostosis, type 1|maffucci syndrome|macrocephaly, macrosomia, and facial dysmorphism syndrome|lipoma|hereditary melanoma|craniopharyngioma|nongerminomatous germ cell tumor|nerve sheath tumors|meningothelial meningioma|schwannomatosis|adamantinous craniopharyngioma|brachydactyly-syndactyly-oligodactyly syndrome|syndactyly|encephalocraniocutaneous lipomatosis|neurofibromatosis, type 1-like syndrome|pigmented nodular adrenocortical disease, primary, 1 (disorder)|melanoma astrocytoma syndrome|synostotic anterior plagiocephaly|adenocarcinoma, basal cell|antley-bixler syndrome with disordered steroidogenesis|adrenal cancer|scaphocephaly, maxillary retrusion, and mental retardation|metopic synostosis|papillary craniopharyngioma|cafe-au-lait spots|trichothiodystrophy, nonphotosensitive 1|hemangioma|oligodendroglioma|acrodysostosis 1 with or without hormone resistance|bone marrow failure syndrome 5|nonepileptic seizures|kallmann syndrome 2 (disorder)|acrocallosal syndrome|brachydactyly, type d|malignant neoplasm of penis|hypothalamic hamartomas|congenital hypoplasia of radius|adenocarcinoma, clear cell|familial atypical mole melanoma syndrome|juvenile pilocytic astrocytoma|carney complex|antley-bixler syndrome phenotype|inflammatory skin and bowel disease, neonatal, 2|carcinoma in situ of uterine cervix|holoprosencephaly, ectrodactyly, and bilateral cleft lip-palate|childhood malignant peripheral nerve sheath tumor|enchondromatosis|brachydactyly-syndactyly syndrome|angiolymphoid hyperplasia|malignant neoplasm of gallbladder|malignant peripheral nerve sheath tumor|pilomyxoid astrocytoma|sarcoma, epithelioid|familial non-medullary thyroid cancer|d-2-hydroxyglutaric aciduria 1|rhabdoid tumor predisposition syndrome 1 (disorder)|torg-winchester syndrome|jackson-weiss syndrome|oculocutaneous albinism type 2|chitayat syndrome|nevus sebaceus of jadassohn|van buchem disease|transitional cell carcinoma of bladder|ischemia|complex craniosynostosis|arteriovenous malformations, cerebral|craniodiaphyseal dysplasia|olfactory groove meningioma|antley-bixler syndrome with genital anomalies and disordered steroidogenesis|nf1 microdeletion syndrome|brown oculocutaneous albinism|vascular calcification|noonan syndrome 6|gastrointestinal hemorrhage|neurofibromatosis 1|exudative vitreoretinopathy 7|exudative vitreoretinopathy 4 (disorder)|fibromatosis, aggressive|xeroderma pigmentosum, complementation group d|experimental hepatoma|proteus syndrome|polysyndactyly|nevus, epidermal (disorder)|neurofibromatosis-noonan syndrome|adult craniopharyngioma|d-2-hydroxyglutaric aciduria 2|gastrointestinal neoplasms|polydactyly, preaxial 4|rhabdoid tumor|interfrontal craniofaciosynostosis|well differentiated oligodendroglioma|neurofibroma|bronchioloalveolar adenocarcinoma|osteopetrosis, autosomal dominant 1|sclerosteosis|choroid plexus carcinoma|syndactyly cenani lenz type|atypical endometrial hyperplasia|atypical teratoid rhabdoid tumor|bent bone dysplasia syndrome|malignant tumor of cervix|thymoma|worth disease|chromosome 8p11 myeloproliferative syndrome|sclerosteosis 2|atrial myxoma, familial|sweeney-cox syndrome|hydrolethalus syndrome 2|noonan syndrome 3|postaxial polydactyly type a|intracranial meningioma|laryngeal squamous cell carcinoma|alloxan diabetes|keratosis|teratoid tumor, atypical|transitional meningioma|von hippel-lindau syndrome|genitourinary neoplasms|hemimegalencephaly|apert syndrome|currarino triad|synostotic posterior plagiocephaly|tumors of adrenal cortex|psammomatous meningioma|acrocephalosyndactylia|malignant rhabdoid tumor, somatic|arnold chiari malformation|adenomatous polyps|trichorrhexis nodosa syndrome|coffin-siris syndrome 4|hydrolethalus syndrome 1|melanocytic nevus|papillomatosis|kaposi sarcoma|skin/hair/eye pigmentation, variation in, 1|mental retardation, autosomal dominant 19|greig cephalopolysyndactyly syndrome|carney complex, type 2|thyroid cancer, nonmedullary, 2|schwannomatosis 1|proteus-like syndrome (disorder)|hairy cell leukemia|gardner syndrome|antley-bixler syndrome, autosomal dominant|congenital melanocytic nevus|cafe-au-lait macules with pulmonary stenosis|spinal meningioma|neurofibrosarcoma|familial meningioma|multiple renal cysts|familial nonmedullary thyroid cancer|combined d-2- and l-2-hydroxyglutaric aciduria|aplasia cutis congenita with epibulbar dermoids|saethre-chotzen syndrome with eyelid anomalies|osteoglophonic dwarfism|noonan syndrome 7|choroid plexus papilloma|intracardiac myxoma|bone mineral density quantitative trait locus 1|progesterone resistance|pallister-hall syndrome|meningiomas, multiple|thymus neoplasms|melanoma, cutaneous malignant, susceptibility to, 2|mixed oligodendroglioma-astrocytoma|giant pigmented hairy nevus\n3\t4\ttyrosinemias|tyrosinemia, type i|tyrosinemia, type iii|hawkinsinuria\n4\t2\tmyosclerosis|myosclerosis, autosomal recessive\n5\t12\ttietz syndrome|albinism, tyrosinase-negative|oculocutaneous albinism type 1|albinism|albinism, ocular, with sensorineural deafness (disorder)|pigmentation disorders|oculocutaneous albinism type 1a|waardenburg syndrome, type iia|coloboma, osteopetrosis, microphthalmia, macrocephaly, albinism, and deafness|skin/hair/eye pigmentation, variation in, 3 (disorder)|melanoma, cutaneous malignant, susceptibility to, 8|albinism, oculocutaneous, type ib (disorder)\n</pre> In\u00a0[12]: Copied! <pre># and here is the histogram\ndisplay(Image(filename='min_cont_50_clusters_histogram.png'))\n</pre> # and here is the histogram display(Image(filename='min_cont_50_clusters_histogram.png')) In\u00a0[13]: Copied! <pre># and the bubble plot\ndisplay(Image(filename='min_cont_50_clusters_bubbles.png'))\n</pre> # and the bubble plot display(Image(filename='min_cont_50_clusters_bubbles.png')) In\u00a0[\u00a0]: Copied! <pre>%%bash\n## You may be interetsed in a given cluster of diseases e.g. the cluster including a disease of interest\ncl_id=$(grep \"congenital coloboma of iris\" min_cont_50_clusters.tsv | cut -f1)\n## One common question when you have a group of related disorders is to find out the commonly shared genes\n## let's isolate this cluster and find what are the commonly shared genes\nDBRetina query --index-prefix disgenetDBR --clusters-file min_cont_50_clusters.tsv --cluster-ids $cl_id -o sel_clust\n</pre> %%bash ## You may be interetsed in a given cluster of diseases e.g. the cluster including a disease of interest cl_id=$(grep \"congenital coloboma of iris\" min_cont_50_clusters.tsv | cut -f1) ## One common question when you have a group of related disorders is to find out the commonly shared genes ## let's isolate this cluster and find what are the commonly shared genes DBRetina query --index-prefix disgenetDBR --clusters-file min_cont_50_clusters.tsv --cluster-ids $cl_id -o sel_clust In\u00a0[16]: Copied! <pre>%%bash\n## The output has the shared genes sorted by frequency in the diseases of interest\n## What are the most common shared genes in our cluster of interest?\nhead sel_clust_features_count_per_group.tsv\n</pre> %%bash ## The output has the shared genes sorted by frequency in the diseases of interest ## What are the most common shared genes in our cluster of interest? head sel_clust_features_count_per_group.tsv <pre>#command: DBRetina query --index-prefix disgenetDBR --clusters-file min_cont_50_clusters.tsv --cluster-ids 40 -o sel_clust\nfeature\tsupergroups_count\tsupergroups\nactg1\t14\tmacrostomia|highly arched eyebrow|ptosis|pointed chin|baraitser-winter syndrome 2|deafness, autosomal dominant 20|blepharoptosis|progressive sensorineural hearing impairment|fryns-aftimos syndrome|abnormality of the pinna|thin upper lip vermilion|congenital coloboma of iris|long philtrum|long palpebral fissure\npax6\t10\tmorning glory syndrome|gillespie syndrome|optic nerve hypoplasia, bilateral|foveal hypoplasia 1|keratitis, hereditary|congenital coloboma of iris|o'donnell pappas syndrome|coloboma of optic disc|hypoplasia of the optic nerve|foveal hypoplasia (finding)\nactb\t6\tqualitative abnormality of granulocyte|iris coloboma with ptosis, hypertelorism, and mental retardation|pigmented hairy epidermal nevus|fryns-aftimos syndrome|becker nevus syndrome|juvenile-onset dystonia\nitpr1\t3\tspinocerebellar ataxia 29|gillespie syndrome|spinocerebellar ataxia 15\nhesx1\t3\thypopituitarism and septooptic 'dysplasia'|pituitary hormone deficiency, combined, 1|hypoplasia of the optic nerve\npou1f1\t2\tpituitary dwarfism|pituitary hormone deficiency, combined, 1\nrnpc3\t2\tpituitary dwarfism|isolated growth hormone deficiency, type v\nspint2\t2\tintestinal epithelial dysplasia|coloboma of optic disc\n</pre> In\u00a0[17]: Copied! <pre># The query function produces a histogram as well\ndisplay(Image(filename='sel_clust_features_count_per_group_histogram.png'))\n</pre> # The query function produces a histogram as well display(Image(filename='sel_clust_features_count_per_group_histogram.png')) In\u00a0[18]: Copied! <pre>%%bash\n## Now, let's export the pairwise similarities of the diseases in the cluster of interest to be used in other visualizations (see documentation)\n## First, you have to use \"filter\" to select a set of pairwise similarities to export. Note that the input pairwaise file and the filtering techqniue will impact this set  \n## Here, we will start from the original \"unfiltered\" pairwaise file and filter a set of pairwise similarities between all the diseases in the selected cluster\ncl_id=$(grep \"congenital coloboma of iris\" min_cont_50_clusters.tsv | cut -f1)\nDBRetina filter --pairwise disgenetDBR_DBRetina_pairwise.tsv --clusters-file min_cont_50_clusters.tsv --cluster-ids $cl_id -o sel_clust\nDBRetina export --pairwise sel_clust.tsv --dist-type min_cont --newick -o exp_clust\n</pre> %%bash ## Now, let's export the pairwise similarities of the diseases in the cluster of interest to be used in other visualizations (see documentation) ## First, you have to use \"filter\" to select a set of pairwise similarities to export. Note that the input pairwaise file and the filtering techqniue will impact this set   ## Here, we will start from the original \"unfiltered\" pairwaise file and filter a set of pairwise similarities between all the diseases in the selected cluster cl_id=$(grep \"congenital coloboma of iris\" min_cont_50_clusters.tsv | cut -f1) DBRetina filter --pairwise disgenetDBR_DBRetina_pairwise.tsv --clusters-file min_cont_50_clusters.tsv --cluster-ids $cl_id -o sel_clust DBRetina export --pairwise sel_clust.tsv --dist-type min_cont --newick -o exp_clust <pre>[INFO] Filtering the pairwise matrix on the NA column with a cutoff of 0.0 and groups file NA.\n[INFO] Filtering by groups file .DBRetina.tmp.group\nPlease wait...\n[SUCCESS] Done.\n[INFO] serializing the distance matrix to exp_clust_distmat.pkl\n[INFO] Writing distance matrix to exp_clust_distmat.tsv\n[INFO] Writing clustermap plot to exp_clust_clustermap.png\n[SUCCESS] Done.\n</pre> In\u00a0[19]: Copied! <pre># The export function produces a heatmap\ndisplay(Image(filename='exp_clust_clustermap.png'))\n</pre> # The export function produces a heatmap display(Image(filename='exp_clust_clustermap.png')) In\u00a0[1]: Copied! <pre>%%bash\n# Now, let us try another scenario where we already have a list of some how related disorders\n# For simulation, we will create this list by selecting any Alzheimer disease in disgenet\ngrep -i \"Alzheimer\" disgenet.names | cut -f2 &gt; Alzheimer_rel.lst\n# Now, let's filter to select the related set of pairwise similarities but we will use the extended mode of filtering to include any similar diseases to out list\nDBRetina filter --pairwise disgenetDBR_DBRetina_pairwise.tsv --dist-type jaccard --cutoff 10 -o jaccard_10 \nDBRetina filter --pairwise jaccard_10.tsv --groups-file Alzheimer_rel.lst --dist-type max_cont --cutoff 25 --extend -o Alzheimer\nDBRetina filter --pairwise disgenetDBR_DBRetina_pairwise.tsv --groups-file Alzheimer_extended_supergroups.txt -o disgenetDBR_Alzheimer\n</pre> %%bash # Now, let us try another scenario where we already have a list of some how related disorders # For simulation, we will create this list by selecting any Alzheimer disease in disgenet grep -i \"Alzheimer\" disgenet.names | cut -f2 &gt; Alzheimer_rel.lst # Now, let's filter to select the related set of pairwise similarities but we will use the extended mode of filtering to include any similar diseases to out list DBRetina filter --pairwise disgenetDBR_DBRetina_pairwise.tsv --dist-type jaccard --cutoff 10 -o jaccard_10  DBRetina filter --pairwise jaccard_10.tsv --groups-file Alzheimer_rel.lst --dist-type max_cont --cutoff 25 --extend -o Alzheimer DBRetina filter --pairwise disgenetDBR_DBRetina_pairwise.tsv --groups-file Alzheimer_extended_supergroups.txt -o disgenetDBR_Alzheimer  <pre>[WARNING] Output file jaccard_10.tsv already exists, overwriting ...\n[INFO] Filtering the pairwise matrix on the jaccard column with a cutoff of 10.0 and groups file NA.\n[INFO] Filtering the pairwise matrix on the jaccard column with a cutoff of 10.0.\n[SUCCESS] Done.\n[WARNING] Output file Alzheimer.tsv already exists, overwriting ...\n[INFO] Filtering the pairwise matrix on the max_cont column with a cutoff of 25.0 and groups file /home/jovyan/Alzheimer_rel.lst.\n[SUCCESS] Done.\n[INFO] Filtering the pairwise matrix on the NA column with a cutoff of 0.0 and groups file /home/jovyan/Alzheimer_extended_supergroups.txt.\n[INFO] Filtering by groups file /home/jovyan/Alzheimer_extended_supergroups.txt\nPlease wait...\n[SUCCESS] Done.\n</pre> In\u00a0[2]: Copied! <pre># How many Alzheimer disease do we have?\n!cat Alzheimer_rel.lst\n</pre> # How many Alzheimer disease do we have? !cat Alzheimer_rel.lst <pre>ALZHEIMER DISEASE 18\nALZHEIMER DISEASE 2\nALZHEIMER DISEASE 4\nALZHEIMER DISEASE 9, SUSCEPTIBILITY TO\nAlzheimer Disease, Early Onset\nAlzheimer Disease, Familial, 3, with Spastic Paraparesis and Apraxia\nAlzheimer disease, familial, type 3\nAlzheimer Disease, Late Onset\nAlzheimer's Disease\nFamilial Alzheimer Disease (FAD)\n</pre> In\u00a0[3]: Copied! <pre># How many disease similar to Alzheimer do we have?\n!cat Alzheimer_extended_supergroups.txt\n</pre> # How many disease similar to Alzheimer do we have? !cat Alzheimer_extended_supergroups.txt <pre>acne inversa, familial, 3\nalzheimer disease 18\nalzheimer disease 2\nalzheimer disease 4\nalzheimer disease, early onset\nalzheimer disease, familial, 3, with spastic paraparesis and apraxia\nalzheimer disease, familial, type 3\nalzheimer disease, late onset\nalzheimer's disease\namyloidosis\narteriosclerosis\nbehavioral variant of frontotemporal dementia\ncardiomyopathy, dilated, 1u\ncardiomyopathy, dilated, 1v\ncarotid artery diseases\ncarotid artery plaque\ncarotid atherosclerosis\ncarotid stenosis\ncerebral amyloid angiopathy\ncognition disorders\ncomplex partial seizures\ndelirium\ndementia\ndiabetes mellitus, experimental\ndowling-degos disease\nfamilial alzheimer disease (fad)\nfamilial dementia\nfrontotemporal dementia\nhepatolenticular degeneration\nhidradenitis suppurativa, familial\nhyperlipoproteinemia type iib\nhyperlipoproteinemia type iii\nhypothyroidism\nimpaired cognition\nlearning disabilities\nlipoprotein glomerulopathy\nmemory disorders\nmemory loss\nmental deterioration\nmild cognitive disorder\nmultiple sclerosis, relapsing-remitting\npick disease of the brain\npresenile dementia\npustulosis of palms and soles\nreticulate acropigmentation of kitamura\nsea-blue histiocyte syndrome\nsemantic dementia\nsplenomegaly\n</pre> In\u00a0[4]: Copied! <pre>%%bash\n# update the IDs to be from 1 to n where n is the number of diseases in this small file\ngrep -v \"^#\" disgenetDBR_Alzheimer.tsv | tail -n+2 | awk 'BEGIN{FS=\"\\t\";OFS=\"\\n\";}{print $1 FS $3,$2 FS $4}' | sort -n | uniq | awk 'BEGIN{FS=OFS=\"\\t\";}{print $1,NR,$2}' &gt; id.map\n# Collect all pairwise distances of the diseases with high similarity to Alzheimer\ngrep -v \"^#\" Alzheimer.tsv | head -n1 &gt; disgenetDBR_Alzheimer_newIds.tsv\nawk 'BEGIN{FS=OFS=\"\\t\";}FNR==NR{a[$1]=$2;next;}{if(a[$1]&amp;&amp;a[$2]){$1=a[$1];$2=a[$2];print $0;}}' id.map disgenetDBR_Alzheimer.tsv &gt;&gt; disgenetDBR_Alzheimer_newIds.tsv\n</pre> %%bash # update the IDs to be from 1 to n where n is the number of diseases in this small file grep -v \"^#\" disgenetDBR_Alzheimer.tsv | tail -n+2 | awk 'BEGIN{FS=\"\\t\";OFS=\"\\n\";}{print $1 FS $3,$2 FS $4}' | sort -n | uniq | awk 'BEGIN{FS=OFS=\"\\t\";}{print $1,NR,$2}' &gt; id.map # Collect all pairwise distances of the diseases with high similarity to Alzheimer grep -v \"^#\" Alzheimer.tsv | head -n1 &gt; disgenetDBR_Alzheimer_newIds.tsv awk 'BEGIN{FS=OFS=\"\\t\";}FNR==NR{a[$1]=$2;next;}{if(a[$1]&amp;&amp;a[$2]){$1=a[$1];$2=a[$2];print $0;}}' id.map disgenetDBR_Alzheimer.tsv &gt;&gt; disgenetDBR_Alzheimer_newIds.tsv  In\u00a0[6]: Copied! <pre># enables the %%R magic\n%load_ext rpy2.ipython\n</pre> # enables the %%R magic %load_ext rpy2.ipython In\u00a0[7]: Copied! <pre>%%R \nif (!requireNamespace(\"RFLPtools\", quietly = TRUE))\n    install.packages(\"RFLPtools\")\nif (!requireNamespace(\"pheatmap\", quietly = TRUE))\n    install.packages(\"pheatmap\")\n</pre> %%R  if (!requireNamespace(\"RFLPtools\", quietly = TRUE))     install.packages(\"RFLPtools\") if (!requireNamespace(\"pheatmap\", quietly = TRUE))     install.packages(\"pheatmap\") In\u00a0[12]: Copied! <pre>%%R\ndbretina_rel=read.table(file=\"disgenetDBR_Alzheimer_newIds.tsv\" ,skip=0, header=TRUE, sep = \"\\t\", quote = \"\", dec = \".\");\ndbretina_nodes=read.table(file=\"id.map\", header=FALSE, sep = \"\\t\", quote = \"\");\n\ntarget=\"max_containment\"\nsize=dim(dbretina_nodes)[1]\ndbret_count_matrix = matrix(0, nrow = size, ncol = size)\nfor (i in 1:dim(dbretina_rel)[1]){\n  dbret_count_matrix[dbretina_rel$group_1_ID[i],dbretina_rel$group_2_ID[i]]=log2(dbretina_rel[[target]][i])\n  dbret_count_matrix[dbretina_rel$group_2_ID[i],dbretina_rel$group_1_ID[i]]=log2(dbretina_rel[[target]][i])\n}\n\n\n## transform the similarity matrix into distance object (measure the dissimilarity)\n\nlibrary(RFLPtools)\ndbret_count_dist = sim2dist(dbret_count_matrix, log2(100))\n## Transform the dist object back into into matrix\ndbret_count_matrix = as.matrix(dbret_count_dist)\n\nrownames(dbret_count_matrix) &lt;- dbretina_nodes$V3\ncolnames(dbret_count_matrix) &lt;- NULL\n\nlibrary(pheatmap)\n#library(repr)\n\ncolors &lt;- colorRampPalette( rev(brewer.pal(9, \"Blues\")) )(255) ## specify a blue color palette for painting\n#options(repr.plot.width = 4, repr.plot.height = 2)\n#jpeg(\"outfig\")\npheatmap(dbret_count_matrix,\n         clustering_distance_rows = dbret_count_dist,\n         clustering_distance_cols = dbret_count_dist,\n         col = colors, cellwidth=5,cellheight=8, fontsize_row=7.5,fontsize_col=0)\n#dev.off()\n</pre> %%R dbretina_rel=read.table(file=\"disgenetDBR_Alzheimer_newIds.tsv\" ,skip=0, header=TRUE, sep = \"\\t\", quote = \"\", dec = \".\"); dbretina_nodes=read.table(file=\"id.map\", header=FALSE, sep = \"\\t\", quote = \"\");  target=\"max_containment\" size=dim(dbretina_nodes)[1] dbret_count_matrix = matrix(0, nrow = size, ncol = size) for (i in 1:dim(dbretina_rel)[1]){   dbret_count_matrix[dbretina_rel$group_1_ID[i],dbretina_rel$group_2_ID[i]]=log2(dbretina_rel[[target]][i])   dbret_count_matrix[dbretina_rel$group_2_ID[i],dbretina_rel$group_1_ID[i]]=log2(dbretina_rel[[target]][i]) }   ## transform the similarity matrix into distance object (measure the dissimilarity)  library(RFLPtools) dbret_count_dist = sim2dist(dbret_count_matrix, log2(100)) ## Transform the dist object back into into matrix dbret_count_matrix = as.matrix(dbret_count_dist)  rownames(dbret_count_matrix) &lt;- dbretina_nodes$V3 colnames(dbret_count_matrix) &lt;- NULL  library(pheatmap) #library(repr)  colors &lt;- colorRampPalette( rev(brewer.pal(9, \"Blues\")) )(255) ## specify a blue color palette for painting #options(repr.plot.width = 4, repr.plot.height = 2) #jpeg(\"outfig\") pheatmap(dbret_count_matrix,          clustering_distance_rows = dbret_count_dist,          clustering_distance_cols = dbret_count_dist,          col = colors, cellwidth=5,cellheight=8, fontsize_row=7.5,fontsize_col=0) #dev.off() In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"DisGeNET_similarity_network-complete/#usecase-building-a-disease-disease-similairty-netwrok","title":"USECASE: Building a disease-disease similairty netwrok\u00b6","text":""},{"location":"installation/","title":"DBRetina installation","text":""},{"location":"installation/#system-requirements","title":"System requirements","text":"<p>The current version of DBRetina is compatible exclusively with <code>x86_64</code> architecture systems running Linux and Python versions 3.8 to 3.11. In the future we will support conda installations and Docker.</p>"},{"location":"installation/#installation","title":"Installation","text":"<p>To install DBRetina, type in the terminal:</p> <pre><code>pip install DBRetina\n</code></pre> <p>Alternavely if you're working in a conda environment, you can type:</p> <pre><code>conda create -n dbretina python=3.10\nconda activate dbretina\npip install DBRetina\n</code></pre>"},{"location":"quick_example/","title":"Quick Example","text":""},{"location":"assets/images/dbretina_filter/Untitled/","title":"Untitled","text":"In\u00a0[36]: Copied! <pre>import matplotlib.pyplot as plt\nimport networkx as nx\n\n# Create a random graph with 20 nodes, each with a 0.5 probability of being connected\nG = nx.gnp_random_graph(10, 0.2, seed=42)\nG.remove_node(4)\n# Highlight specific nodes\nhighlight_nodes = [1, 2, 5]\n\n# Generate a fixed layout\nlayout = nx.spring_layout(G, seed=42)\n\n# Define node colors\nnode_colors = [\"orange\" if node in highlight_nodes else \"grey\" for node in G.nodes()]\n\n# Define figure size\nplt.figure(figsize=(10, 8))\n\n# Draw the graph using the fixed layout\nnx.draw(G, pos=layout, with_labels=False, node_color=node_colors, node_size=800, edge_color=\"gray\", linewidths=2, edgecolors='black', width=0.5)\n\n# Draw node labels\nfor p in layout:\n    layout[p][1] += 0.06  # move labels up\nnx.draw_networkx_labels(G, pos=layout, font_size=12)\n\nplt.title('Initial Graph', fontsize=20)\nplt.savefig(\"example_dbretina_filter_initial.png\", dpi = 300)\n\n# Identify nodes that are directly linked to the highlighted nodes\nadditional_nodes = [node for node in G.nodes() if any((node, neighbor) in G.edges() or (neighbor, node) in G.edges() for neighbor in highlight_nodes)]\n\n# Update the highlight nodes list\nhighlight_nodes = list(set(highlight_nodes + additional_nodes))\n\n# Define node colors\nnode_colors = [\"orange\" if node in highlight_nodes else \"grey\" for node in G.nodes()]\n\n# Define figure size\nplt.figure(figsize=(10, 8))\n\n# Draw the graph using the same layout\nnx.draw(G, pos=layout, with_labels=False, node_color=node_colors, node_size=800, edge_color=\"gray\", linewidths=2, edgecolors='black', width=0.5)\n\n# Draw node labels\nfor p in layout:\n    layout[p][1] += 0.06  # move labels up\nnx.draw_networkx_labels(G, pos=layout, font_size=12)\n\nplt.title('Extended Graph', fontsize=20)\n# plt.show()\nplt.savefig(\"example_dbretina_filter_extend.png\", dpi = 300)\n</pre> import matplotlib.pyplot as plt import networkx as nx  # Create a random graph with 20 nodes, each with a 0.5 probability of being connected G = nx.gnp_random_graph(10, 0.2, seed=42) G.remove_node(4) # Highlight specific nodes highlight_nodes = [1, 2, 5]  # Generate a fixed layout layout = nx.spring_layout(G, seed=42)  # Define node colors node_colors = [\"orange\" if node in highlight_nodes else \"grey\" for node in G.nodes()]  # Define figure size plt.figure(figsize=(10, 8))  # Draw the graph using the fixed layout nx.draw(G, pos=layout, with_labels=False, node_color=node_colors, node_size=800, edge_color=\"gray\", linewidths=2, edgecolors='black', width=0.5)  # Draw node labels for p in layout:     layout[p][1] += 0.06  # move labels up nx.draw_networkx_labels(G, pos=layout, font_size=12)  plt.title('Initial Graph', fontsize=20) plt.savefig(\"example_dbretina_filter_initial.png\", dpi = 300)  # Identify nodes that are directly linked to the highlighted nodes additional_nodes = [node for node in G.nodes() if any((node, neighbor) in G.edges() or (neighbor, node) in G.edges() for neighbor in highlight_nodes)]  # Update the highlight nodes list highlight_nodes = list(set(highlight_nodes + additional_nodes))  # Define node colors node_colors = [\"orange\" if node in highlight_nodes else \"grey\" for node in G.nodes()]  # Define figure size plt.figure(figsize=(10, 8))  # Draw the graph using the same layout nx.draw(G, pos=layout, with_labels=False, node_color=node_colors, node_size=800, edge_color=\"gray\", linewidths=2, edgecolors='black', width=0.5)  # Draw node labels for p in layout:     layout[p][1] += 0.06  # move labels up nx.draw_networkx_labels(G, pos=layout, font_size=12)  plt.title('Extended Graph', fontsize=20) # plt.show() plt.savefig(\"example_dbretina_filter_extend.png\", dpi = 300)"},{"location":"usage/dbretina_bipartite/","title":"Bipartite","text":"<p>The Bipartite command will create a bipartite graph from a pairwise TSV file between two groups files.</p> <pre><code>Usage: DBRetina bipartite [OPTIONS]\n\n  Create a bipartite connections between two group files\n\nOptions:\n  -p, --pairwise PATH  the pairwise TSV file  [required]\n  --group1 PATH        group1 single-column supergroups file  [required]\n  --group2 PATH        group2 single-column supergroups file  [required]\n  -m, --metric TEXT    select from ['containment', 'ochiai', 'jaccard',\n                       'pvalue']  [required]\n  -o, --output TEXT    output file prefix  [required]\n  --help               Show this message and exit.\n</code></pre>"},{"location":"usage/dbretina_bipartite/#command-arguments","title":"Command arguments","text":"<p>  -p, --pairwise PATH  the pairwise TSV file  [required] </p> <p>The original or a filtered pairwise TSV file.</p> <p> --group1 PATH        group1 single-column supergroups file  [required] </p> <p>A single-column file with the group1 supergroups.</p> <p> --group2 PATH        group2 single-column supergroups file  [required] </p> <p>A single-column file with the group2 supergroups.</p> <p> -m, --metric TEXT    select from ['containment', 'ochiai', 'jaccard', 'pvalue']  [required] </p> <p>The similarity metric that will be used to create the bipartite graph.</p> <p> -o, --output TEXT    output prefix  [required] </p> <p>The output files prefix.</p>"},{"location":"usage/dbretina_bipartite/#output-files-format","title":"Output files format","text":"<p> {output_prefix}_bipartite_pairwise.tsv </p> <p>A pairwise TSV file with the bipartite connections.</p> <p> {output_prefix}_bipartite.html </p> <p>An intercative bipartite graph in HTML format.</p> <p> {output_prefix}_bipartite.png </p> <p>A bipartite graph in PNG format.</p> <p> {output_prefix}_missing_groups.txt </p> <p>If there are missing groups in the group files, they will be reported in this file.</p> Interactive Bipartite graphBipartite PNG plot <p>Browser not compatible.</p> <p></p>"},{"location":"usage/dbretina_cluster/","title":"Clustering the pairwise similarities","text":"<p>Graph-based clustering of the pairwise TSV file based on the connected components algorithm. The clustering is based on the similarity metric and the cutoff value. The output is a DBRetina clusters file.</p> <pre><code>Usage: DBRetina cluster [OPTIONS]\n\n  Graph-based clustering of the pairwise TSV file.\n\nOptions:\n  -p, --pairwise PATH       pairwise TSV file  [required]\n  -m, --metric TEXT         select from ['containment', 'ochiai', 'jaccard',\n                            'pvalue']  [required]\n  --community               clusters as communities\n  -c, --cutoff FLOAT RANGE  cluster the supergroups with (similarity &gt; cutoff)\n                            [0&lt;=x&lt;=100; required]\n  -o, --output-prefix TEXT  output file prefix  [required]\n  --help                    Show this message and exit.\n</code></pre>"},{"location":"usage/dbretina_cluster/#41-command-arguments","title":"4.1 Command arguments","text":"<p> -c, --cutoff FLOAT RANGE  cluster the supergroups with (similarity &gt; cutoff) [0&lt;=x&lt;=100; required] </p> <p>The cutoff value for clustering the supergroups. The default value is 0.0, which means that all comparisons are included in the clustering.</p> <p> -p, --pairwise PATH       pairwise TSV file  [required] </p> <p>The original pairwise TSV file generated from <code>DBRetina pairwise</code> command, or <code>DBRetina filter</code> command.</p> <p> -m, --metric TEXT         select from ['containment', 'ochiai', 'jaccard', 'pvalue']  [required] </p> <p>The similarity metric to apply the cutoff on.</p> <p> --community               clusters as communities </p> <p>This flag will cluster the supergroups by a community detection algorithm. The default is to cluster the supergroups using the weakly connected components algorithm.</p> <p> -o, --output-prefix TEXT  output file prefix  [required] </p> <p>The user-defined prefix for the output files.</p>"},{"location":"usage/dbretina_cluster/#42-output-files-format","title":"4.2 Output files format","text":"<p> {output_prefix}_clusters.tsv </p> <p>The DBRetina clusters TSV file. First column is the cluster ID, second column is the cluster size, and the third column is PIPE separated cluster members.</p> <p> {output_prefix}_clusters_histogram.png </p> <p>A histogram provides of cluster sizes. Each bar corresponds to a size range, with a log-scale y-axis indicating the number of clusters falling within that range. This allows for a quick understanding of how cluster sizes are distributed, identifying common sizes and outliers.</p> <p> </p> Example histogram plot <p> {output_prefix}_clusters_bubbles.png </p> <p>A Bubble plot uses a grid layout to represent distinct clusters. The bubble size and color gradient both denote the magnitude of each cluster. The bubble plot is useful for visualizing the distribution of cluster sizes and the relative sizes of each cluster.</p> <p> </p> Example Bubble plot"},{"location":"usage/dbretina_dedup/","title":"Dedup","text":"<p>The <code>dedup</code> command is used to remove duplicate groups from a pairwise file that shares very high similarity.</p> <pre><code>Usage: DBRetina dedup [OPTIONS]\n\n  Deduplicate the pairwise distance file using ochiai similarity\n\nOptions:\n  -i, --index-prefix TEXT   Index file prefix  [required]\n  -p, --pairwise PATH       the pairwise TSV file  [required]\n  -c, --cutoff FLOAT RANGE  ochiai similarity cutoff  [0&lt;=x&lt;=100; required]\n  -o, --output TEXT         output file prefix  [required]\n  --help                    Show this message and exit.\n</code></pre>"},{"location":"usage/dbretina_dedup/#command-arguments","title":"Command arguments","text":"<p> -i, --index-prefix TEXT   Index file prefix  [required] </p> <p>This is the user-defined prefix that was used in the indexing step as an output prefix.</p> <p>  -p, --pairwise PATH  the pairwise TSV file  [required] </p> <p>The original or a filtered pairwise TSV file.</p> <p> -c, --cutoff FLOAT RANGE  filter out similarities &lt; cutoff  [default: 0.0; 0&lt;=x&lt;=100] </p> <p>The <code>-c --cutoff</code> argument uses the Ochiai metric.</p> <p> -o, --output TEXT    output prefix  [required] </p> <p>The output files prefix.</p>"},{"location":"usage/dbretina_dedup/#output-files-format","title":"Output files format","text":"<p> {output_prefix}_deduplicated_groups.txt </p> <p>The final deduplicated groups file. This file can be used with the <code>DBRetina filter</code> command to filter out the groups that are not present in the final deduplicated groups file.</p>"},{"location":"usage/dbretina_export/","title":"Export","text":"<p>The Export command converts the pairwise TSV file to a dissimilarity matrix and (optionally) a newick-format file.</p> <pre><code>Usage: DBRetina export [OPTIONS]\n\n  Export to distance matrix and tree formats.\n\n  Export a pairwise TSV file into a distance matrix, newick-format file and\n  circular dendrogram.\n\nOptions:\n  -p, --pairwise PATH  pairwise TSV file  [required]\n  -m, --metric TEXT    select from ['containment', 'ochiai', 'jaccard',\n                       'pvalue']  [required]\n  --newick             Convert the distance matrix to newick tree format\n  -l, --labels TEXT    select from ['ids', 'names']  [default: names]\n  --linkage TEXT       select from ['single', 'complete', 'average',\n                       'weighted', 'centroid', 'median', 'ward']  [default:\n                       ward]\n  -o, --output TEXT    output prefix  [required]\n  --help               Show this message and exit.\n</code></pre>"},{"location":"usage/dbretina_export/#command-arguments","title":"Command arguments","text":"<p> -p, --pairwise PATH  pairwise TSV file  [required] </p> <p>The original or a filtered pairwise TSV file.</p> <p> -m, --metric TEXT    select from ['containment', 'ochiai', 'jaccard', 'pvalue']  [required] </p> <p>The similarity metric to be utilized in the dissimilarity matrix.</p> <p> --newick              Convert the dissimilarity matrix to newick tree format </p> <p>This will convert the dissimilarity matrix to a newick tree format.</p> <p> -l, --labels TEXT    select from ['ids', 'names']  [default: names] </p> <p>The labels to be used in all outputs (plots, newick, dissimilarity matrix). Default is names. The option option is the IDs which are the IDs found in the <code>{index_prefix}.namesMap</code> file.</p> <p> --linkage TEXT       select from ['single', 'complete', 'average', 'weighted', 'centroid', 'median', 'ward']  [default: ward] </p> <p> -o, --output TEXT    output prefix  [required] </p> <p>The output files prefix.</p>"},{"location":"usage/dbretina_export/#output-files-format","title":"Output files format","text":"<p> {output_prefix}_distmat.tsv </p> <p>A labels tab-separated similarity matrix file.</p> <p> {output_prefix}_distmat.pkl </p> <p>A labels pickle similarity matrix file in Python pickle format.</p> <p> {output_prefix}.newick </p> <p>A newick tree file that can be used in tree visualization tools.</p> <p> {output_prefix}_dendrogram.png </p> <p>A circular dendrogram plot of the tree.</p> <p> {output_prefix}_heatmap.png </p> <p>A heatmap plot of the similarity matrix.</p> Heatmap exampleDendrogram example <p></p> <p></p>"},{"location":"usage/dbretina_filter/","title":"Filtering pairwise similarities","text":"<p>The Filter command in DBRetina is designed to filter out the pairwise TSV file. The command requires the full path of the pairwise TSV file.</p> <pre><code>Usage: DBRetina filter [OPTIONS]\n\n  Filter a pairwise file.\n\n  Detailed description:\n\n      Filter a pairwise file by similarity cutoff and/or a set of groups\n      (provided as a single-column file or cluster IDs in a DBRetina cluster\n      file).\n\nOptions:\n  -p, --pairwise PATH       the pairwise TSV file  [required]\n  -g, --groups-file PATH    single-column supergroups file\n  --clusters-file PATH      DBRetina clusters file\n  --cluster-ids TEXT        comma-separated list of cluster IDs\n  -m, --metric TEXT         select from ['containment', 'ochiai', 'jaccard',\n                            'pvalue']\n  -c, --cutoff FLOAT RANGE  filter out similarities &lt; cutoff  [0&lt;=x&lt;=100]\n  --extend                  include all supergroups that are linked to the\n                            given supergroups.\n  -o, --output TEXT         output file prefix  [required]\n  --help                    Show this message and exit.\n</code></pre>"},{"location":"usage/dbretina_filter/#command-arguments","title":"Command arguments","text":"<p> -p, --pairwise PATH       the pairwise TSV file  [required] </p> <p>The pairwise file to be filtered. This file can be generated by <code>DBRetina pairwise</code> or <code>DBretina filter</code> commands.</p> <p> -g, --groups-file PATH    single-column supergroups file  The groups file is a single-column file text file that contains the names of the supergroups to be included in the filtering.</p> <p>Note</p> <p>The group names must exist in the <code>{index_prefix}_raw.json</code> file. It will be autoconverted to lowercase.</p> <p> --clusters-file PATH      DBRetina clusters file </p> <p>The clusters file is generated from the command <code>DBRetina cluster</code>. This is used alongside the <code>--cluster-ids</code> argument to filter out all pairwise similarities that are not in the provided clusters.</p> <p> --cluster-ids TEXT        comma-separated list of cluster IDs </p> <p>The cluster IDs selected from the clusters file. This argument is only used if the <code>--clusters-file</code> is provided.</p> <p> -m, --metric TEXT      select from ['containment', 'ochiai', 'jaccard', 'pvalue'] </p> <p>The similarity metric to filter out pairwise comparisons below a certain cutoff.</p> <p> -c, --cutoff FLOAT RANGE  filter out similarities &lt; cutoff  [default: 0.0; 0&lt;=x&lt;=100] </p> <p>The <code>-c --cutoff</code> argument is used with the <code>-m --metric</code> argument to define the cutoff.</p> <p> --extend                  include all supergroups that are linked to the given supergroups. </p> <p>In pairwise comparisons, imagine a graph with groups as nodes and their relationships as edges. Initially, only edges between user-defined groups are considered. The <code>--extend</code> option enlarges this scope, incorporating all nodes directly linked to user-defined groups, from either the <code>--groups</code> input or the <code>--clusters-file</code> &amp; <code>--cluster-ids</code>. This option can only be used when groups information is provided.</p> <p>Here's an example of the effect of <code>--extend</code> on the pairwise graph. The user-defined groups are nodes (1,2,5).</p> Without <code>--extend</code>After <code>--extend</code> <p></p> <p></p> <p></p> <p> -o, --output TEXT         output file prefix  [required] </p> <p>The output files prefix.</p> <p></p> <p>Usage examples</p> Similarity cutoffSimilarity cutoff &amp; groups fileCluster IDsGroups file <pre><code>  DBRetina filter -p pairwise.tsv -m ochiai -c 60 -o filtered_pairwise\n</code></pre> <p>This will filter out all pairwise similarities that are below 60% Ochiai similarity.</p> <pre><code>  DBRetina filter -p pairwise.tsv -m containment -c 97 -g groups.tsv -o filtered_pairwise\n</code></pre> <p>This will filter out all pairwise similarities that are below 97% containment similarity AND exist in the <code>groups.tsv</code> file.</p> <pre><code>DBRetina filter -p pairwise.tsv --clusters-file clusters.tsv --clusters-ids 1,2,8 -o filtered_pairwise\n</code></pre> <p>This will filter out all pairwise similarities that are not in the clusters with IDs 1, 2, and 8.</p> <pre><code>  DBRetina filter -p pairwise.tsv -g groups.tsv -o filtered_pairwise\n</code></pre> <p>This will filter out all pairwise similarities that are between groups that are not in the <code>groups.tsv</code> file. In other words, it will only keep the similarities between groups that are in the <code>groups.tsv</code> file.</p>"},{"location":"usage/dbretina_filter/#output-files","title":"Output files","text":"<p> {output_prefix}.tsv </p> <p>Filtered version of the pairwise TSV file.</p> <p> {output_prefix}_extended_supergroups.txt </p> <p>If the <code>--extend</code> argument is used, this file will contain the names of the extended supergroups.</p>"},{"location":"usage/dbretina_index/","title":"Indexing (Index the input data files)","text":"<p>The Indexing process in DBRetina primarily focuses on creating an index structure for the input entities and their associated features. This structure is utilized for calculating pairwise distances between input entities using the \"pairwise\" command, as well as querying one or more features to determine their associated entities with the \"query\" command.</p> <pre><code>Usage: DBRetina index [OPTIONS]\n\n  Index the input data files.\n\nOptions:\n  -a, --asc TEXT     associations file col1: supergroup, col2: single feature. 1st\n                     line is header.\n  -g, --gmt TEXT     GMT file(s)\n  -o, --output TEXT  output file prefix  [required]\n  --help             Show this message and exit.\n</code></pre>"},{"location":"usage/dbretina_index/#command-arguments","title":"Command arguments","text":"<p>Warning</p> <ul> <li>The text of all input files is automatically converted to lowercase.</li> <li>All double quotes are removed.</li> </ul> <p>Danger</p> <p>Pipe character <code>|</code> can't be used in the input data.</p> <p> -a, --asc TEXT     associations file(s) col1: supergroup, col2: single feature. 1st line is header.</p> <p>The \"Association File\" is a two-column TSV (tab-separated values) file with an included header. The first column denotes groups, while the second column indicates the features associated with each respective group. Each row signifies a single feature and its corresponding group.</p> <p>Example of an Association File with features as features:</p> <p><pre><code>Disease       feature\nBreast Cancer BRCA1\nBreast Cancer BRCA2\nLung Cancer   EGFR\nLung Cancer   KRAS\n</code></pre> </p> <p>-g, --gmt TEXT     GMT file(s).</p> <p>The \"GMT File\" is a tab-delimited headerless file that contains feature sets. Each row denotes a single feature set, while the first column indicates the name of the feature set. The second column contains a description of the feature set, while the remaining columns contain the features that belong to the feature set. Click here to read more about GMT format.</p> <p></p> <p>-o, --output TEXT  output file prefix  [required]</p> <p>The output file prefix is used to name the output files. The output files are explained in detail in the next section.</p> <p></p> <p>Example</p> Multiple GMT filesMultiple association files <pre><code>DBRetina index -g gmt_file1.gmt -g gmt_file2.gmt -o idx_example\n</code></pre> <pre><code>DBRetina index -a asc_file1.tsv -a asc_file2.tsv -o idx_example\n</code></pre> <p></p> <p>Warning</p> <p>You can't use combination of gmt files and association files, the command accepts only one type of input.</p>"},{"location":"usage/dbretina_index/#output-files-format","title":"Output files format","text":"<p>The output featurerated by the Index command consists of two JSON files (private and public) and a set of index files. These files are explained in detail below:</p>"},{"location":"usage/dbretina_index/#primary-output-files","title":"Primary output files","text":"<p> {prefix}_raw.json </p> <p>This JSON file contains supergroups and their related features in plain text. This JSON file is prepared for the user to understand the final input data that is used for indexing.</p> <p> {prefix}_hashes.json </p> <p>This is another JSON file that contains supergroups and their related features, but the features are hashed for indexing. This JSON file is used internally by DBRetina for indexing.</p> Advanced Output (For developers) <p><code>{output_prefix}_groupID_to_featureCount.bin</code>: binary file that contains the number of features for each supergroup.</p> <p><code>{output_prefix}_groupID_to_featureCount.tsv</code>: tab-delimited file that contains the number of features for each supergroup.</p> <p><code>{output_prefix}_color_count.bin</code>: binary file that contains the colors count.</p> <p><code>{output_prefix}.phmap</code>: The parallel-hash-map binary index file contains features and their associated colors.</p> <p><code>{output_prefix}.namesMap</code>: pipe-delimited file of supergroup ID and its original name with total number of supergroups in header.</p> <p><code>{output_prefix}_color_to_sources.bin</code>: binary file that contains the colors and their associated supergroup IDs.</p> <p><code>{output_prefix}.extra</code>: text file that contains metadata for inter-command communication.</p>"},{"location":"usage/dbretina_interactome/","title":"Interactome","text":"<pre><code>Usage: DBRetina interactome [OPTIONS]\n\n  Construct a features-interactome.\n\n  Detailed description:\n\n  For a groups pairwise file, construct an interactome between the features of\n  each group and all other features in the pairwise file.\n\nOptions:\n  -i, --index-prefix TEXT   index file prefix  [required]\n  -p, --pairwise PATH       pairwise TSV file  [required]\n  --graphml                 export interactome as graphml file\n  --gexf                    export interactome as gexf file\n  -o, --output-prefix TEXT  output file prefix  [required]\n  --help                    Show this message and exit.\n</code></pre>"},{"location":"usage/dbretina_interactome/#command-arguments","title":"Command arguments","text":"<p> -i, --index-prefix TEXT   Index file prefix  [required] </p> <p>This is the user-defined prefix that was used in the indexing step as an output prefix.</p> <p>  -p, --pairwise PATH  the pairwise TSV file  [required] </p> <p>The original or a filtered pairwise TSV file.</p> <p> --graphml </p> <p>Export interactome as graphml file.</p> <p> --gexf </p> <p>Export interactome as gexf file.</p> <p> -o, --output TEXT    output prefix  [required] </p> <p>The output files prefix.</p>"},{"location":"usage/dbretina_interactome/#output-files-format","title":"Output files format","text":"<p> {output_prefix}_interactome.tsv </p> <p>A pairwise TSV file with the interactome connections.</p> <p> {output_prefix}_interactome.garphml </p> <p>An interactome graph in graphml format.</p> <p> {output_prefix}_interactome.gexf </p> <p>An interactome graph in gexf format.</p>"},{"location":"usage/dbretina_modularity/","title":"Dedup","text":"<p>The <code>modularity</code> command calculates the fragmentation, heterogeneity, and modularity of the groups.</p> <pre><code>Usage: DBRetina modularity [OPTIONS]\n\n  Compute the modularity of gene sets\n\nOptions:\n  -i, --index-prefix TEXT   Index file prefix  [required]\n  -p, --pairwise PATH       pairwise TSV file  [required]\n  -c, --cutoff FLOAT RANGE  containment cutoff  [0&lt;=x&lt;=100; required]\n  -o, --output TEXT         output file prefix  [required]\n  --help                    Show this message and exit.\n</code></pre>"},{"location":"usage/dbretina_modularity/#command-arguments","title":"Command arguments","text":"<p> -i, --index-prefix TEXT   Index file prefix  [required] </p> <p>This is the user-defined prefix that was used in the indexing step as an output prefix.</p> <p>  -p, --pairwise PATH  the pairwise TSV file  [required] </p> <p>The original or a filtered pairwise TSV file.</p> <p>-c, --cutoff FLOAT RANGE  containment cutoff  [0&lt;=x&lt;=100; required] </p> <p>The <code>-c --cutoff</code> argument uses the Containment metric.</p> <p> -o, --output TEXT    output prefix  [required] </p> <p>The output files prefix.</p>"},{"location":"usage/dbretina_modularity/#output-files-format","title":"Output files format","text":"<p> {output_prefix}_modularity.txt </p> <p>A TSV file that provides information about the fragmentation, heterogeneity, and modularity of the groups. The TSV columns are defined as follows:</p> group_name The group name (node name) fragmentation Number of outbound edges from the node (-ve value) heterogeneity Number of inbound edges to the node modularity absolute(modularity + heterogeneity) <p>The lower modularity value indicates a more modular group. Which means that the group is more likely to be a representative group.</p>"},{"location":"usage/dbretina_pairwise/","title":"Pairwise","text":"<p>The Pairwise command in DBRetina is designed to perform pairwise comparisons between supergroups based on their shared features. This command takes the index prefix and the number of cores as input parameters.</p> <pre><code>Usage: DBRetina pairwise [OPTIONS]\n\n  Calculate pairwise similarities.\n\nOptions:\n  -i, --index-prefix TEXT   Index file prefix  [required]\n  -t, --threads INTEGER     number of cores  [default: 1]\n  -m, --metric TEXT         select from ['containment', 'jaccard', 'ochiai']\n  -c, --cutoff FLOAT RANGE  filter out similarities &lt; cutoff  [default: 0.0;\n                            0&lt;=x&lt;=100]\n  --pvalue                  calculate Hypergeometric p-value\n  --help                    Show this message and exit.\n</code></pre>"},{"location":"usage/dbretina_pairwise/#command-arguments","title":"Command arguments","text":"<p> -i, --index-prefix TEXT   Index file prefix  [required] </p> <p>This is the user-defined prefix that was used in the indexing step as an output prefix.</p> <p> -t, --threads INTEGER     number of cores  [default: 1] </p> <p>The number of processing cores to be used for parallel computation during the pairwise comparisons.</p> <p> -m, --metric TEXT         select from ['containment', 'jaccard', 'ochiai'] </p> <p>Optional similarity metric to filter out pairwise comparisons below a certain cutoff from exporting.</p> <p> -c, --cutoff FLOAT RANGE filter out similarities &lt; cutoff  [default: 0.0; 0&lt;=x&lt;=100] </p> <p>The <code>-c</code> argument is used with the <code>-m</code> argument to define the cutoff.</p> <p> --pvalue                  calculate Hypergeometric p-value  This flag calculates the Hypergeometric p-value for pairwise comparisons based on shared features between supergroups and the total number of features in the database.</p>"},{"location":"usage/dbretina_pairwise/#output-files","title":"Output files","text":""},{"location":"usage/dbretina_pairwise/#primary-output-files","title":"Primary output files","text":"<p> {index_prefix}_DBRetina_pairwise.tsv </p> <p>A TSV file that provides information about shared features between each pair of supergroups. The TSV columns are defined as follows:</p> group_1_ID ID of the first supergroup in a pair group_2_ID ID of the second supergroup in a pair group_1_name name of the first supergroup in a pair group_2_name name of the second supergroup in a pair shared_features number of features shared between the two supergroups containment The containment metric is the ratio of shared kmers to the smallest set of kmers. This score is calculated as (shared_kmers / minimum_source_kmers) * 100. ochiai Ochiai similarity computed as 100 * (shared_kmers / sqrt(source_1_kmers * source_2_kmers)) jaccard Jaccard similarity percentage. calculated as 100 * (shared_kmers / (source_1_kmers + source_2_kmers - shared_kmers)) odds_ratio The `odds_ratio` function calculates the odds ratio between two supergroups, quantifying the strength of association between them based on shared features. It returns a `double` representing the odds ratio, or `-1` if the calculation encounters a division by zero. pvalue This p-value quantifies the statistical significance of the overlap between the two supergroups, given their sizes and the universe of all features. Calculated from hypergeometric distribution. <p> {index_prefix}_DBRetina_similarity_metrics_plot_log.png </p> <p>The clustered bar chart shows the logarithmic frequency distribution of three similarity metrics - containment, ochiai, and jaccard - over different similarity ranges.</p> <p> {index_prefix}_DBRetina_similarity_metrics_plot_linear.png </p> <p>Same as above, but the y-axis is displayed on a linear scale.</p> Example plot (Log)Example plot (Linear) <p></p> <p></p> Advanced Output (For developers) <p><code>{index_prefix}_DBRetina_pairwise_stats.json</code>: used to generate the similarity metrics plot. <code>{index_prefix}_DBRetina_pairwise_stats_odds_ratio.txt</code>: odds-ratio metadata for next step of commands.</p>"},{"location":"usage/dbretina_query/","title":"Querying a DBRetina index","text":"<p>Query a DBRetina index with a set of groups (provided as a single-column file or cluster IDs in a DBRetina cluster file).</p> <pre><code>Usage: DBRetina query [OPTIONS]\n\n  Query DBRetina index.\n\n  Detailed description:\n\n      Query a DBRetina index with a set of groups (provided as a single-column\n      file or cluster IDs in a DBRetina cluster file). Output each feature and\n      the associated supergroups.\n\n  Examples:\n\n      1- groups file                    | DBRetina query -i index_prefix -g\n      groups_file -o output_prefix\n\n      2- clusters file with cluster IDs | DBRetina query -i index_prefix\n      --clusters-file clusters_file --cluster-ids 1,2,3 -o output_prefix\n\nOptions:\n  -i, --index-prefix TEXT  index file prefix  [required]\n  -g, --groups-file PATH   single-column supergroups file\n  --clusters-file PATH     DBRetina clusters file\n  --cluster-ids TEXT       comma-separated list of cluster IDs\n  -o, --output TEXT        output file prefix  [required]\n  --help                   Show this message and exit.\n</code></pre>"},{"location":"usage/dbretina_query/#command-arguments","title":"Command arguments","text":"<p> -i, --index-prefix TEXT  Index file prefix  [required] </p> <p>This is the user-defined prefix that was used in the indexing step.</p> <p> -g, --groups-file PATH    single-column supergroups file </p> <p>This will filter out all pairwise similarities that are between supergroups that are not in the provided groups file. The groups file is a single-column file that contains the names of the supergroups to be included in the filtering.</p> <p> --cluster-ids TEXT        comma-separated list of cluster IDs </p> <p>The cluster IDs selected from the clusters file. This argument is only used if the clusters file is not provided.</p> <p> -o, --output TEXT        output file prefix  [required] </p> <p>The output prefix that should be unique for this query.</p>"},{"location":"usage/dbretina_query/#output-files-format","title":"Output files format","text":"<p> {output_prefix}_features_count_per_group.tsv </p> <p>A TSV file containing two columns, the first column is the supergroup name and the second column is the number of features that are contained in that supergroup, and the third column is a PIPE-separated list of supergroups from the user query that are associated with the feature in the first column.</p>"}]}